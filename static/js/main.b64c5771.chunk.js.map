{"version":3,"sources":["Codenames/Codenames.js","serviceWorker.js","index.js"],"names":["Status","props","headColor","turn","headTitle","buttonTitle","className","style","color","blue","red","onClick","handleButtonClick","Cell","cellIndex","r","c","backgroundColor","stateGridCell","handleClick","cell","Row","row","map","col_index","key","stateGridRow","Board","wordGrid","row_index","stateGrid","Game","data","sampleData","English","colorGrid","colorCode","initGrid","i","nameArr","splice","push","Array","fill","state","blueTurn","bluePoint","redPoint","gameOver","bind","this","setState","value","colorMap","0","1","2","3","Object","keys","find","oldGrid","slice","oldAgent","newAgent","colorKey","getkeyByValue","console","log","parseInt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b64c5771.chunk.js","sourcesContent":["/* eslint-disable default-case */\r\n\r\nimport React from 'react';\r\nimport sampleData from './names.json';\r\nimport './styles.css'\r\n\r\nfunction Status(props) {\r\n  var headColor = props.turn ? \"Blue\" : \"Red\";\r\n  var headTitle = headColor + \"'s turn\";\r\n  var buttonTitle = \"End \" + headTitle\r\n  return(\r\n    <div className=\"status-line\">\r\n      <div>\r\n        <span style={{color:\"blue\"}}>{props.blue}</span> - <span style={{color:\"red\"}}>{props.red}</span>\r\n      </div>\r\n      <div className=\"title-turn\">\r\n        <h5 style={{color: headColor}}>{headTitle}</h5>\r\n      </div>\r\n      <div className=\"title-button\">\r\n        <button onClick={() => props.handleButtonClick()}>{buttonTitle}</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Cell(props) {\r\n  var cellIndex = [props.r,props.c]\r\n  var bgColor = props.stateGridCell\r\n  var style = {\r\n    color: \"black\",\r\n    backgroundColor: bgColor\r\n  }\r\n  return(\r\n    <div className=\"cell-style\" style={style} onClick={() => props.handleClick(cellIndex)}>\r\n      {props.cell}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Row(props) {\r\n  return (\r\n    <div className=\"row-style\">\r\n      {props.row.map((cell,col_index) => \r\n        <Cell key={col_index} r={props.r} c={col_index} cell={cell} handleClick={props.handleClick}\r\n           stateGridCell={props.stateGridRow[col_index]}/>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Board(props) {\r\n  return(\r\n    <div className=\"board-style\">\r\n      {props.wordGrid.map((row,row_index) =>  \r\n        <Row key={row_index} row={row} r={row_index} handleClick={props.handleClick}\r\n              stateGridRow={props.stateGrid[row_index]}/>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    var data = sampleData.English\r\n    this.colorGrid = sampleData.colorCode\r\n    this.wordGrid= []\r\n    var initGrid = []\r\n    for(let i=0; i<5; i++) {\r\n      var nameArr = data.splice(0,5)\r\n      this.wordGrid.push(nameArr)\r\n      initGrid.push(new Array(5).fill(\"lightgray\"))\r\n    }\r\n    this.state = {stateGrid:initGrid, blueTurn:true, bluePoint: 9, redPoint: 8, gameOver: false}\r\n    this.handleClick = this.handleClick.bind(this)\r\n    this.handleButtonClick = this.handleButtonClick.bind(this)\r\n  }\r\n  handleButtonClick() {\r\n    this.setState({blueTurn: !this.state.blueTurn})\r\n  }\r\n  getkeyByValue(value) {\r\n    var colorMap = {0: \"dodgerblue\", 1: \"#D80000\", 2: \"peachpuff\", 3:\"black\"}\r\n    return(\r\n      Object.keys(colorMap).find(key => colorMap[key] === value)\r\n    )\r\n  }\r\n  handleClick(cellIndex) {\r\n    var oldGrid = this.state.stateGrid.slice()\r\n    var r = cellIndex[0]\r\n    var c = cellIndex[1]\r\n    var oldAgent = oldGrid[r][c]\r\n    var newAgent = this.colorGrid[r][c]\r\n    if (oldAgent === \"lightgray\") {\r\n      var colorKey = this.getkeyByValue(newAgent)\r\n      console.log(colorKey, newAgent)\r\n      oldGrid[r][c] = newAgent\r\n      this.setState({stateGrid: oldGrid})\r\n    }\r\n    switch(parseInt(colorKey)) {\r\n      case 0: {\r\n        if(this.state.blueTurn){\r\n          this.setState({bluePoint: this.state.bluePoint - 1}) \r\n        }\r\n        else {\r\n          this.setState({bluePoint: this.state.bluePoint - 1, blueTurn: !this.state.blueTurn})\r\n        }\r\n        break;\r\n      }\r\n      case 1: {\r\n        if(this.state.blueTurn){\r\n          this.setState({redPoint: this.state.redPoint - 1, blueTurn: !this.state.blueTurn}) \r\n        }\r\n        else {\r\n          this.setState({redPoint: this.state.redPoint - 1})\r\n        }\r\n        break;\r\n      }\r\n      case 2: {\r\n        this.setState({blueTurn: !this.state.blueTurn})\r\n        break;\r\n      }\r\n      case 3: {\r\n        this.setState({gameOver: !this.state.gameOver})\r\n      }\r\n    }\r\n    console.log(this.state.bluePoint, this.state.redPoint)\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"main-container\">\r\n        <h2>CODENAMES</h2>\r\n        <hr/>\r\n        <Status turn={this.state.blueTurn} blue={this.state.bluePoint} red={this.state.redPoint}\r\n                handleButtonClick={this.handleButtonClick}/>\r\n        <Board wordGrid={this.wordGrid} stateGrid={this.state.stateGrid} \r\n                handleClick={this.handleClick}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Codenames/Codenames.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Game/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}